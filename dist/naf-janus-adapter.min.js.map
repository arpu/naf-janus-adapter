{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/minijanus/minijanus.js","webpack:///./node_modules/sdp/sdp.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","mj","require","JanusSession","sendOriginal","send","type","signal","this","catch","e","message","indexOf","console","error","NAF","connection","adapter","reconnect","sdpUtils","debug","log","warn","isSafari","test","navigator","userAgent","debounce","fn","curr","Promise","resolve","args","Array","slice","arguments","then","_","apply","untilDataChannelOpen","dataChannel","reject","readyState","resolver","rejector","clear","removeEventListener","addEventListener","isH264VideoSupported","document","createElement","canPlayType","OPUS_PARAMETERS","usedtx","stereo","DEFAULT_PEER_CONNECTION_CONFIG","iceServers","urls","JanusAdapter","constructor","room","clientId","joinToken","serverUrl","webRtcOptions","peerConnectionConfig","ws","session","reliableTransport","unreliableTransport","initialReconnectionDelay","Math","random","reconnectionDelay","reconnectionTimeout","maxReconnectionAttempts","reconnectionAttempts","publisher","occupants","leftOccupants","Set","mediaStreams","localMediaStream","pendingMediaRequests","Map","blockedClients","frozenUpdates","timeOffsets","serverTimeRequests","avgTimeOffset","onWebsocketOpen","onWebsocketClose","onWebsocketMessage","onDataChannelMessage","onData","setServerUrl","url","setApp","app","setRoom","roomName","setJoinToken","setClientId","setWebRtcOptions","options","setPeerConnectionConfig","setServerConnectListeners","successListener","failureListener","connectSuccess","connectFailure","setRoomOccupantListener","occupantListener","onOccupantsChanged","setDataChannelListeners","openListener","closedListener","messageListener","onOccupantConnected","onOccupantDisconnected","onOccupantMessage","setReconnectionListeners","reconnectingListener","reconnectedListener","reconnectionErrorListener","onReconnecting","onReconnected","onReconnectionError","connect","websocketConnection","WebSocket","timeoutMs","wsOnOpen","all","updateTimeOffset","disconnect","clearTimeout","removeAllOccupants","conn","close","dispose","delayedReconnectTimeout","isDisconnected","createPublisher","addOccupantPromises","initialOccupants","length","occupantId","push","addOccupant","event","code","setTimeout","Error","performDelayedReconnect","receive","JSON","parse","data","removeOccupant","delete","subscriber","createSubscriber","setMediaStream","mediaStream","getOwnPropertyNames","add","has","msg","audio","video","associate","handle","ev","sendTrickle","candidate","iceConnectionState","offer","createOffer","configurePublisherSdp","fixSafariIceUFrag","local","setLocalDescription","remote","j","sendJsep","setRemoteDescription","jsep","on","answer","configureSubscriberSdp","createAnswer","a","JanusPluginHandle","RTCPeerConnection","attach","webrtcup","reliableChannel","createDataChannel","ordered","unreliableChannel","maxRetransmits","getTracks","forEach","track","addTrack","plugindata","room_id","user_id","body","dispatchEvent","CustomEvent","detail","by","sendJoin","notifications","success","err","response","users","includes","sdp","replace","line","pt","parameters","assign","parseFmtp","writeFmtp","payloadType","maxRetries","webrtcFailed","leftInterval","setInterval","clearInterval","timeout","media","_iOSHackDelayedInitialPeer","MediaStream","getReceivers","receiver","subscribe","sendMessage","kind","token","toggleFreeze","frozen","unfreeze","freeze","flushPendingUpdates","dataForUpdateMultiMessage","networkId","getPendingData","dataType","owner","getPendingDataForNetworkId","source","storeMessage","storeSingleMessage","index","undefined","storedMessage","storedData","isOutdatedMessage","lastOwnerTime","isContemporaneousMessage","isFirstSync","set","components","enabled","shouldStartConnectionTo","client","startStreamConnection","closeStreamConnection","getConnectStatus","adapters","IS_CONNECTED","NOT_CONNECTED","clientSentTime","Date","now","res","fetch","location","href","method","cache","serverReceivedTime","headers","getTime","precision","clientReceivedTime","timeOffset","reduce","acc","offset","getServerTime","getMediaStream","audioPromise","videoPromise","promise","stream","audioStream","getAudioTracks","videoStream","getVideoTracks","setLocalMediaStream","existingSenders","getSenders","newSenders","tracks","sender","find","replaceTrack","toLowerCase","removeTrack","enableMicrophone","sendData","stringify","whom","sendDataGuaranteed","broadcastData","broadcastDataGuaranteed","kick","permsToken","block","unblock","register","id","output","nextTxId","txns","eventHandlers","verbose","keepaliveMs","plugin","payload","resp","detach","callback","handle_id","destroy","txId","_killKeepalive","txn","isError","janus","handlers","_logIncoming","session_id","responseType","transaction","toString","_transmit","_logOutgoing","_resetKeepalive","_sendKeepalive","keepaliveTimeout","SDPUtils","substr","localCName","generateIdentifier","splitLines","blob","trim","split","map","splitSections","part","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","parseCandidate","parts","substring","foundation","component","1","2","protocol","priority","parseInt","ip","address","port","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","direction","uri","writeExtmap","headerExtension","preferredId","kv","keys","params","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","isNaN","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","charAt"],"mappings":"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","file":"naf-janus-adapter.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var mj = require(\"minijanus\");\nmj.JanusSession.prototype.sendOriginal = mj.JanusSession.prototype.send;\nmj.JanusSession.prototype.send = function(type, signal) {\n  return this.sendOriginal(type, signal).catch((e) => {\n    if (e.message && e.message.indexOf(\"timed out\") > -1) {\n      console.error(\"web socket timed out\");\n      NAF.connection.adapter.reconnect();\n    } else {\n      throw(e);\n    }\n  });\n}\n\nvar sdpUtils = require(\"sdp\");\n//var debug = require(\"debug\")(\"naf-janus-adapter:debug\");\n//var warn = require(\"debug\")(\"naf-janus-adapter:warn\");\n//var error = require(\"debug\")(\"naf-janus-adapter:error\");\nvar debug = console.log;\nvar warn = console.warn;\nvar error = console.error;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nconst SUBSCRIBE_TIMEOUT_MS = 15000;\n\nfunction debounce(fn) {\n  var curr = Promise.resolve();\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    curr = curr.then(_ => fn.apply(this, args));\n  };\n}\n\nfunction randomUint() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction untilDataChannelOpen(dataChannel) {\n  return new Promise((resolve, reject) => {\n    if (dataChannel.readyState === \"open\") {\n      resolve();\n    } else {\n      let resolver, rejector;\n\n      const clear = () => {\n        dataChannel.removeEventListener(\"open\", resolver);\n        dataChannel.removeEventListener(\"error\", rejector);\n      };\n\n      resolver = () => {\n        clear();\n        resolve();\n      };\n      rejector = () => {\n        clear();\n        reject();\n      };\n\n      dataChannel.addEventListener(\"open\", resolver);\n      dataChannel.addEventListener(\"error\", rejector);\n    }\n  });\n}\n\nconst isH264VideoSupported = (() => {\n  const video = document.createElement(\"video\");\n  return video.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"') !== \"\";\n})();\n\nconst OPUS_PARAMETERS = {\n  // indicates that we want to enable DTX to elide silence packets\n  usedtx: 1,\n  // indicates that we prefer to receive mono audio (important for voip profile)\n  stereo: 0,\n  // indicates that we prefer to send mono audio (important for voip profile)\n  \"sprop-stereo\": 0\n};\n\nconst DEFAULT_PEER_CONNECTION_CONFIG = {\n  iceServers: [{ urls: \"stun:stun1.l.google.com:19302\" }, { urls: \"stun:stun2.l.google.com:19302\" }]\n};\n\nconst WS_NORMAL_CLOSURE = 1000;\n\nclass JanusAdapter {\n  constructor() {\n    this.room = null;\n    // We expect the consumer to set a client id before connecting.\n    this.clientId = null;\n    this.joinToken = null;\n\n    this.serverUrl = null;\n    this.webRtcOptions = {};\n    this.peerConnectionConfig = null;\n    this.ws = null;\n    this.session = null;\n    this.reliableTransport = \"datachannel\";\n    this.unreliableTransport = \"datachannel\";\n\n    // In the event the server restarts and all clients lose connection, reconnect with\n    // some random jitter added to prevent simultaneous reconnection requests.\n    this.initialReconnectionDelay = 1000 * Math.random();\n    this.reconnectionDelay = this.initialReconnectionDelay;\n    this.reconnectionTimeout = null;\n    this.maxReconnectionAttempts = 10;\n    this.reconnectionAttempts = 0;\n\n    this.publisher = null;\n    this.occupants = {};\n    this.leftOccupants = new Set();\n    this.mediaStreams = {};\n    this.localMediaStream = null;\n    this.pendingMediaRequests = new Map();\n\n    this.blockedClients = new Map();\n    this.frozenUpdates = new Map();\n\n    this.timeOffsets = [];\n    this.serverTimeRequests = 0;\n    this.avgTimeOffset = 0;\n\n    this.onWebsocketOpen = this.onWebsocketOpen.bind(this);\n    this.onWebsocketClose = this.onWebsocketClose.bind(this);\n    this.onWebsocketMessage = this.onWebsocketMessage.bind(this);\n    this.onDataChannelMessage = this.onDataChannelMessage.bind(this);\n    this.onData = this.onData.bind(this);\n  }\n\n  setServerUrl(url) {\n    this.serverUrl = url;\n  }\n\n  setApp(app) {}\n\n  setRoom(roomName) {\n    this.room = roomName;\n  }\n\n  setJoinToken(joinToken) {\n    this.joinToken = joinToken;\n  }\n\n  setClientId(clientId) {\n    this.clientId = clientId;\n  }\n\n  setWebRtcOptions(options) {\n    this.webRtcOptions = options;\n  }\n\n  setPeerConnectionConfig(peerConnectionConfig) {\n    this.peerConnectionConfig = peerConnectionConfig;\n  }\n\n  setServerConnectListeners(successListener, failureListener) {\n    this.connectSuccess = successListener;\n    this.connectFailure = failureListener;\n  }\n\n  setRoomOccupantListener(occupantListener) {\n    this.onOccupantsChanged = occupantListener;\n  }\n\n  setDataChannelListeners(openListener, closedListener, messageListener) {\n    this.onOccupantConnected = openListener;\n    this.onOccupantDisconnected = closedListener;\n    this.onOccupantMessage = messageListener;\n  }\n\n  setReconnectionListeners(reconnectingListener, reconnectedListener, reconnectionErrorListener) {\n    // onReconnecting is called with the number of milliseconds until the next reconnection attempt\n    this.onReconnecting = reconnectingListener;\n    // onReconnected is called when the connection has been reestablished\n    this.onReconnected = reconnectedListener;\n    // onReconnectionError is called with an error when maxReconnectionAttempts has been reached\n    this.onReconnectionError = reconnectionErrorListener;\n  }\n\n  connect() {\n    debug(`connecting to ${this.serverUrl}`);\n\n    const websocketConnection = new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.serverUrl, \"janus-protocol\");\n\n      this.session = new mj.JanusSession(this.ws.send.bind(this.ws), { timeoutMs: 40000 });\n\n      this.ws.addEventListener(\"close\", this.onWebsocketClose);\n      this.ws.addEventListener(\"message\", this.onWebsocketMessage);\n\n      this.wsOnOpen = () => {\n        this.ws.removeEventListener(\"open\", this.wsOnOpen);\n        this.onWebsocketOpen()\n          .then(resolve)\n          .catch(reject);\n      };\n\n      this.ws.addEventListener(\"open\", this.wsOnOpen);\n    });\n\n    return Promise.all([websocketConnection, this.updateTimeOffset()]);\n  }\n\n  disconnect() {\n    debug(`disconnecting`);\n\n    clearTimeout(this.reconnectionTimeout);\n\n    this.removeAllOccupants();\n    this.leftOccupants = new Set();\n\n    if (this.publisher) {\n      // Close the publisher peer connection. Which also detaches the plugin handle.\n      this.publisher.conn.close();\n      this.publisher = null;\n    }\n\n    if (this.session) {\n      this.session.dispose();\n      this.session = null;\n    }\n\n    if (this.ws) {\n      this.ws.removeEventListener(\"open\", this.wsOnOpen);\n      this.ws.removeEventListener(\"close\", this.onWebsocketClose);\n      this.ws.removeEventListener(\"message\", this.onWebsocketMessage);\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Now that all RTCPeerConnection closed, be sure to not call\n    // reconnect() again via performDelayedReconnect if previous\n    // RTCPeerConnection was in the failed state.\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n      this.delayedReconnectTimeout = null;\n    }\n  }\n\n  isDisconnected() {\n    return this.ws === null;\n  }\n\n  async onWebsocketOpen() {\n    // Create the Janus Session\n    await this.session.create();\n\n    // Attach the SFU Plugin and create a RTCPeerConnection for the publisher.\n    // The publisher sends audio and opens two bidirectional data channels.\n    // One reliable datachannel and one unreliable.\n    this.publisher = await this.createPublisher();\n\n    // Call the naf connectSuccess callback before we start receiving WebRTC messages.\n    this.connectSuccess(this.clientId);\n\n    const addOccupantPromises = [];\n\n    for (let i = 0; i < this.publisher.initialOccupants.length; i++) {\n      const occupantId = this.publisher.initialOccupants[i];\n      if (occupantId === this.clientId) continue; // Happens during non-graceful reconnects due to zombie sessions\n      addOccupantPromises.push(this.addOccupant(occupantId));\n    }\n\n    await Promise.all(addOccupantPromises);\n  }\n\n  onWebsocketClose(event) {\n    // The connection was closed successfully. Don't try to reconnect.\n    if (event.code === WS_NORMAL_CLOSURE) {\n      return;\n    }\n\n    console.warn(\"Janus websocket closed unexpectedly.\");\n    if (this.onReconnecting) {\n      this.onReconnecting(this.reconnectionDelay);\n    }\n\n    this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n  }\n\n  reconnect() {\n    // Dispose of all networked entities and other resources tied to the session.\n    this.disconnect();\n\n    this.connect()\n      .then(() => {\n        this.reconnectionDelay = this.initialReconnectionDelay;\n        this.reconnectionAttempts = 0;\n\n        if (this.onReconnected) {\n          this.onReconnected();\n        }\n      })\n      .catch(error => {\n        this.reconnectionDelay += 1000;\n        this.reconnectionAttempts++;\n\n        if (this.reconnectionAttempts > this.maxReconnectionAttempts && this.onReconnectionError) {\n          return this.onReconnectionError(\n            new Error(\"Connection could not be reestablished, exceeded maximum number of reconnection attempts.\")\n          );\n        }\n\n        console.warn(\"Error during reconnect, retrying.\");\n        console.warn(error);\n\n        if (this.onReconnecting) {\n          this.onReconnecting(this.reconnectionDelay);\n        }\n\n        this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n      });\n  }\n\n  performDelayedReconnect() {\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n    }\n\n    this.delayedReconnectTimeout = setTimeout(() => {\n      this.delayedReconnectTimeout = null;\n      this.reconnect();\n    }, 10000);\n  }\n\n  onWebsocketMessage(event) {\n    this.session.receive(JSON.parse(event.data));\n  }\n\n  async addOccupant(occupantId) {\n    if (this.occupants[occupantId]) {\n      this.removeOccupant(occupantId);\n    }\n\n    this.leftOccupants.delete(occupantId);\n\n    var subscriber = await this.createSubscriber(occupantId);\n\n    if (!subscriber) return;\n\n    this.occupants[occupantId] = subscriber;\n\n    this.setMediaStream(occupantId, subscriber.mediaStream);\n\n    // Call the Networked AFrame callbacks for the new occupant.\n    this.onOccupantConnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n\n    return subscriber;\n  }\n\n  removeAllOccupants() {\n    for (const occupantId of Object.getOwnPropertyNames(this.occupants)) {\n      this.removeOccupant(occupantId);\n    }\n  }\n\n  removeOccupant(occupantId) {\n    this.leftOccupants.add(occupantId);\n\n    if (this.occupants[occupantId]) {\n      // Close the subscriber peer connection. Which also detaches the plugin handle.\n      this.occupants[occupantId].conn.close();\n      delete this.occupants[occupantId];\n    }\n\n    if (this.mediaStreams[occupantId]) {\n      delete this.mediaStreams[occupantId];\n    }\n\n    if (this.pendingMediaRequests.has(occupantId)) {\n      const msg = \"The user disconnected before the media stream was resolved.\";\n      this.pendingMediaRequests.get(occupantId).audio.reject(msg);\n      this.pendingMediaRequests.get(occupantId).video.reject(msg);\n      this.pendingMediaRequests.delete(occupantId);\n    }\n\n    // Call the Networked AFrame callbacks for the removed occupant.\n    this.onOccupantDisconnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n  }\n\n  associate(conn, handle) {\n    conn.addEventListener(\"icecandidate\", ev => {\n      handle.sendTrickle(ev.candidate || null).catch(e => error(\"Error trickling ICE: %o\", e));\n    });\n    conn.addEventListener(\"iceconnectionstatechange\", ev => {\n      if (conn.iceConnectionState === \"connected\") {\n        console.log(\"ICE state changed to connected\");\n      }\n      if (conn.iceConnectionState === \"disconnected\") {\n        console.warn(\"ICE state changed to disconnected\");\n      }\n      if (conn.iceConnectionState === \"failed\") {\n        console.warn(\"ICE failure detected. Reconnecting in 10s.\");\n        this.performDelayedReconnect();\n      }\n    })\n\n    // we have to debounce these because janus gets angry if you send it a new SDP before\n    // it's finished processing an existing SDP. in actuality, it seems like this is maybe\n    // too liberal and we need to wait some amount of time after an offer before sending another,\n    // but we don't currently know any good way of detecting exactly how long :(\n    conn.addEventListener(\n      \"negotiationneeded\",\n      debounce(ev => {\n        debug(\"Sending new offer for handle: %o\", handle);\n        var offer = conn.createOffer().then(this.configurePublisherSdp).then(this.fixSafariIceUFrag);\n        var local = offer.then(o => conn.setLocalDescription(o));\n        var remote = offer;\n\n        remote = remote\n          .then(this.fixSafariIceUFrag)\n          .then(j => handle.sendJsep(j))\n          .then(r => conn.setRemoteDescription(r.jsep));\n        return Promise.all([local, remote]).catch(e => error(\"Error negotiating offer: %o\", e));\n      })\n    );\n    handle.on(\n      \"event\",\n      debounce(ev => {\n        var jsep = ev.jsep;\n        if (jsep && jsep.type == \"offer\") {\n          debug(\"Accepting new offer for handle: %o\", handle);\n          var answer = conn\n            .setRemoteDescription(this.configureSubscriberSdp(jsep))\n            .then(_ => conn.createAnswer())\n            .then(this.fixSafariIceUFrag);\n          var local = answer.then(a => conn.setLocalDescription(a));\n          var remote = answer.then(j => handle.sendJsep(j));\n          return Promise.all([local, remote]).catch(e => error(\"Error negotiating answer: %o\", e));\n        } else {\n          // some other kind of event, nothing to do\n          return null;\n        }\n      })\n    );\n  }\n\n  async createPublisher() {\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(\"pub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\");\n\n    this.associate(conn, handle);\n\n    debug(\"pub waiting for data channels & webrtcup\");\n    var webrtcup = new Promise(resolve => handle.on(\"webrtcup\", resolve));\n\n    // Unreliable datachannel: sending and receiving component updates.\n    // Reliable datachannel: sending and recieving entity instantiations.\n    var reliableChannel = conn.createDataChannel(\"reliable\", { ordered: true });\n    var unreliableChannel = conn.createDataChannel(\"unreliable\", {\n      ordered: false,\n      maxRetransmits: 0\n    });\n\n    reliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-reliable\"));\n    unreliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-unreliable\"));\n\n    await webrtcup;\n    await untilDataChannelOpen(reliableChannel);\n    await untilDataChannelOpen(unreliableChannel);\n\n    // doing this here is sort of a hack around chrome renegotiation weirdness --\n    // if we do it prior to webrtcup, chrome on gear VR will sometimes put a\n    // renegotiation offer in flight while the first offer was still being\n    // processed by janus. we should find some more principled way to figure out\n    // when janus is done in the future.\n    if (this.localMediaStream) {\n      this.localMediaStream.getTracks().forEach(track => {\n        conn.addTrack(track, this.localMediaStream);\n      });\n    }\n\n    // Handle all of the join and leave events.\n    handle.on(\"event\", ev => {\n      var data = ev.plugindata.data;\n      if (data.event == \"join\" && data.room_id == this.room) {\n        if (this.delayedReconnectTimeout) {\n          // Don't create a new RTCPeerConnection, all RTCPeerConnection will be closed in less than 10s.\n          return;\n        }\n        this.addOccupant(data.user_id);\n      } else if (data.event == \"leave\" && data.room_id == this.room) {\n        this.removeOccupant(data.user_id);\n      } else if (data.event == \"blocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: data.by } }));\n      } else if (data.event == \"unblocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: data.by } }));\n      } else if (data.event === \"data\") {\n        this.onData(JSON.parse(data.body), \"janus-event\");\n      }\n    });\n\n    debug(\"pub waiting for join\");\n\n    // Send join message to janus. Listen for join/leave messages. Automatically subscribe to all users' WebRTC data.\n    var message = await this.sendJoin(handle, {\n      notifications: true,\n      data: true\n    });\n\n    if (!message.plugindata.data.success) {\n      const err = message.plugindata.data.error;\n      console.error(err);\n      // We may get here because of an expired JWT.\n      // Close the connection ourself otherwise janus will close it after\n      // session_timeout because we didn't send any keepalive and this will\n      // trigger a delayed reconnect because of the iceconnectionstatechange\n      // listener for failure state.\n      // Even if the app code calls disconnect in case of error, disconnect\n      // won't close the peer connection because this.publisher is not set.\n      conn.close();\n      throw err;\n    }\n\n    var initialOccupants = message.plugindata.data.response.users[this.room] || [];\n\n    if (initialOccupants.includes(this.clientId)) {\n      console.warn(\"Janus still has previous session for this client. Reconnecting in 10s.\");\n      this.performDelayedReconnect();\n    }\n\n    debug(\"publisher ready\");\n    return {\n      handle,\n      initialOccupants,\n      reliableChannel,\n      unreliableChannel,\n      conn\n    };\n  }\n\n  configurePublisherSdp(jsep) {\n    jsep.sdp = jsep.sdp.replace(/a=fmtp:(109|111).*\\r\\n/g, (line, pt) => {\n      const parameters = Object.assign(sdpUtils.parseFmtp(line), OPUS_PARAMETERS);\n      return sdpUtils.writeFmtp({ payloadType: pt, parameters: parameters });\n    });\n    return jsep;\n  }\n\n  configureSubscriberSdp(jsep) {\n    // todo: consider cleaning up these hacks to use sdputils\n    if (!isH264VideoSupported) {\n      if (navigator.userAgent.indexOf(\"HeadlessChrome\") !== -1) {\n        // HeadlessChrome (e.g. puppeteer) doesn't support webrtc video streams, so we remove those lines from the SDP.\n        jsep.sdp = jsep.sdp.replace(/m=video[^]*m=/, \"m=\");\n      }\n    }\n\n    // TODO: Hack to get video working on Chrome for Android. https://groups.google.com/forum/#!topic/mozilla.dev.media/Ye29vuMTpo8\n    if (navigator.userAgent.indexOf(\"Android\") === -1) {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\r\\n\"\n      );\n    } else {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\r\\n\"\n      );\n    }\n    return jsep;\n  }\n\n  async fixSafariIceUFrag(jsep) {\n    // Safari produces a \\n instead of an \\r\\n for the ice-ufrag. See https://github.com/meetecho/janus-gateway/issues/1818\n    jsep.sdp = jsep.sdp.replace(/[^\\r]\\na=ice-ufrag/g, \"\\r\\na=ice-ufrag\");\n    return jsep\n  }\n\n  async createSubscriber(occupantId, maxRetries = 5) {\n    if (this.leftOccupants.has(occupantId)) {\n      console.warn(occupantId + \": cancelled occupant connection, occupant left before subscription negotation.\");\n      return null;\n    }\n\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(occupantId + \": sub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\");\n\n    this.associate(conn, handle);\n\n    debug(occupantId + \": sub waiting for join\");\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after attach\");\n      return null;\n    }\n\n    let webrtcFailed = false;\n\n    const webrtcup = new Promise(resolve => {\n      const leftInterval = setInterval(() => {\n        if (this.leftOccupants.has(occupantId)) {\n          clearInterval(leftInterval);\n          resolve();\n        }\n      }, 1000);\n\n      const timeout = setTimeout(() => {\n        clearInterval(leftInterval);\n        webrtcFailed = true;\n        resolve();\n      }, SUBSCRIBE_TIMEOUT_MS);\n\n      handle.on(\"webrtcup\", () => {\n        clearTimeout(timeout);\n        clearInterval(leftInterval);\n        resolve();\n      });\n    });\n\n    // Send join message to janus. Don't listen for join/leave messages. Subscribe to the occupant's media.\n    // Janus should send us an offer for this occupant's media in response to this.\n    await this.sendJoin(handle, { media: occupantId });\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after join\");\n      return null;\n    }\n\n    debug(occupantId + \": sub waiting for webrtcup\");\n    await webrtcup;\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancel occupant connection, occupant left during or after webrtcup\");\n      return null;\n    }\n\n    if (webrtcFailed) {\n      conn.close();\n      if (maxRetries > 0) {\n        console.warn(occupantId + \": webrtc up timed out, retrying\");\n        return this.createSubscriber(occupantId, maxRetries - 1);\n      } else {\n        console.warn(occupantId + \": webrtc up timed out\");\n        return null;\n      }\n    }\n\n    if (isSafari && !this._iOSHackDelayedInitialPeer) {\n      // HACK: the first peer on Safari during page load can fail to work if we don't\n      // wait some time before continuing here. See: https://github.com/mozilla/hubs/pull/1692\n      await (new Promise((resolve) => setTimeout(resolve, 3000)));\n      this._iOSHackDelayedInitialPeer = true;\n    }\n\n    var mediaStream = new MediaStream();\n    var receivers = conn.getReceivers();\n    receivers.forEach(receiver => {\n      if (receiver.track) {\n        mediaStream.addTrack(receiver.track);\n      }\n    });\n    if (mediaStream.getTracks().length === 0) {\n      mediaStream = null;\n    }\n\n    debug(occupantId + \": subscriber ready\");\n    return {\n      handle,\n      mediaStream,\n      conn\n    };\n  }\n\n  sendJoin(handle, subscribe) {\n    return handle.sendMessage({\n      kind: \"join\",\n      room_id: this.room,\n      user_id: this.clientId,\n      subscribe,\n      token: this.joinToken\n    });\n  }\n\n  toggleFreeze() {\n    if (this.frozen) {\n      this.unfreeze();\n    } else {\n      this.freeze();\n    }\n  }\n\n  freeze() {\n    this.frozen = true;\n  }\n\n  unfreeze() {\n    this.frozen = false;\n    this.flushPendingUpdates();\n  }\n\n  dataForUpdateMultiMessage(networkId, message) {\n    // \"d\" is an array of entity datas, where each item in the array represents a unique entity and contains\n    // metadata for the entity, and an array of components that have been updated on the entity.\n    // This method finds the data corresponding to the given networkId.\n    for (let i = 0, l = message.data.d.length; i < l; i++) {\n      const data = message.data.d[i];\n\n      if (data.networkId === networkId) {\n        return data;\n      }\n    }\n\n    return null;\n  }\n\n  getPendingData(networkId, message) {\n    if (!message) return null;\n\n    let data = message.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, message) : message.data;\n\n    // Ignore messages relating to users who have disconnected since freezing, their entities\n    // will have aleady been removed by NAF.\n    // Note that delete messages have no \"owner\" so we have to check for that as well.\n    if (data.owner && !this.occupants[data.owner]) return null;\n\n    // Ignore messages from users that we may have blocked while frozen.\n    if (data.owner && this.blockedClients.has(data.owner)) return null;\n\n    return data\n  }\n\n  // Used externally\n  getPendingDataForNetworkId(networkId) {\n    return this.getPendingData(networkId, this.frozenUpdates.get(networkId));\n  }\n\n  flushPendingUpdates() {\n    for (const [networkId, message] of this.frozenUpdates) {\n      let data = this.getPendingData(networkId, message);\n      if (!data) continue;\n\n      // Override the data type on \"um\" messages types, since we extract entity updates from \"um\" messages into\n      // individual frozenUpdates in storeSingleMessage.\n      const dataType = message.dataType === \"um\" ? \"u\" : message.dataType;\n\n      this.onOccupantMessage(null, dataType, data, message.source);\n    }\n    this.frozenUpdates.clear();\n  }\n\n  storeMessage(message) {\n    if (message.dataType === \"um\") { // UpdateMulti\n      for (let i = 0, l = message.data.d.length; i < l; i++) {\n        this.storeSingleMessage(message, i);\n      }\n    } else {\n      this.storeSingleMessage(message);\n    }\n  }\n\n  storeSingleMessage(message, index) {\n    const data = index !== undefined ? message.data.d[index] : message.data;\n    const dataType = message.dataType;\n    const source = message.source;\n\n    const networkId = data.networkId;\n\n    if (!this.frozenUpdates.has(networkId)) {\n      this.frozenUpdates.set(networkId, message);\n    } else {\n      const storedMessage = this.frozenUpdates.get(networkId);\n      const storedData = storedMessage.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, storedMessage) : storedMessage.data;\n\n      // Avoid updating components if the entity data received did not come from the current owner.\n      const isOutdatedMessage = data.lastOwnerTime < storedData.lastOwnerTime;\n      const isContemporaneousMessage = data.lastOwnerTime === storedData.lastOwnerTime;\n      if (isOutdatedMessage || (isContemporaneousMessage && storedData.owner > data.owner)) {\n        return;\n      }\n\n      if (dataType === \"r\") {\n        const createdWhileFrozen = storedData && storedData.isFirstSync;\n        if (createdWhileFrozen) {\n          // If the entity was created and deleted while frozen, don't bother conveying anything to the consumer.\n          this.frozenUpdates.delete(networkId);\n        } else {\n          // Delete messages override any other messages for this entity\n          this.frozenUpdates.set(networkId, message);\n        }\n      } else {\n        // merge in component updates\n        if (storedData.components && data.components) {\n          Object.assign(storedData.components, data.components);\n        }\n      }\n    }\n  }\n\n  onDataChannelMessage(e, source) {\n    this.onData(JSON.parse(e.data), source);\n  }\n\n  onData(message, source) {\n    if (debug.enabled) {\n      debug(`DC in: ${message}`);\n    }\n\n    if (!message.dataType) return;\n\n    message.source = source;\n\n    if (this.frozen) {\n      this.storeMessage(message);\n    } else {\n      this.onOccupantMessage(null, message.dataType, message.data, message.source);\n    }\n  }\n\n  shouldStartConnectionTo(client) {\n    return true;\n  }\n\n  startStreamConnection(client) {}\n\n  closeStreamConnection(client) {}\n\n  getConnectStatus(clientId) {\n    return this.occupants[clientId] ? NAF.adapters.IS_CONNECTED : NAF.adapters.NOT_CONNECTED;\n  }\n\n  async updateTimeOffset() {\n    if (this.isDisconnected()) return;\n\n    const clientSentTime = Date.now();\n\n    const res = await fetch(document.location.href, {\n      method: \"HEAD\",\n      cache: \"no-cache\"\n    });\n\n    const precision = 1000;\n    const serverReceivedTime = new Date(res.headers.get(\"Date\")).getTime() + precision / 2;\n    const clientReceivedTime = Date.now();\n    const serverTime = serverReceivedTime + (clientReceivedTime - clientSentTime) / 2;\n    const timeOffset = serverTime - clientReceivedTime;\n\n    this.serverTimeRequests++;\n\n    if (this.serverTimeRequests <= 10) {\n      this.timeOffsets.push(timeOffset);\n    } else {\n      this.timeOffsets[this.serverTimeRequests % 10] = timeOffset;\n    }\n\n    this.avgTimeOffset = this.timeOffsets.reduce((acc, offset) => (acc += offset), 0) / this.timeOffsets.length;\n\n    if (this.serverTimeRequests > 10) {\n      debug(`new server time offset: ${this.avgTimeOffset}ms`);\n      setTimeout(() => this.updateTimeOffset(), 5 * 60 * 1000); // Sync clock every 5 minutes.\n    } else {\n      this.updateTimeOffset();\n    }\n  }\n\n  getServerTime() {\n    return Date.now() + this.avgTimeOffset;\n  }\n\n  getMediaStream(clientId, type = \"audio\") {\n    if (this.mediaStreams[clientId]) {\n      debug(`Already had ${type} for ${clientId}`);\n      return Promise.resolve(this.mediaStreams[clientId][type]);\n    } else {\n      debug(`Waiting on ${type} for ${clientId}`);\n      if (!this.pendingMediaRequests.has(clientId)) {\n        this.pendingMediaRequests.set(clientId, {});\n\n        const audioPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).audio = { resolve, reject };\n        });\n        const videoPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).video = { resolve, reject };\n        });\n\n        this.pendingMediaRequests.get(clientId).audio.promise = audioPromise;\n        this.pendingMediaRequests.get(clientId).video.promise = videoPromise;\n\n        audioPromise.catch(e => console.warn(`${clientId} getMediaStream Audio Error`, e));\n        videoPromise.catch(e => console.warn(`${clientId} getMediaStream Video Error`, e));\n      }\n      return this.pendingMediaRequests.get(clientId)[type].promise;\n    }\n  }\n\n  setMediaStream(clientId, stream) {\n    // Safari doesn't like it when you use single a mixed media stream where one of the tracks is inactive, so we\n    // split the tracks into two streams.\n    const audioStream = new MediaStream();\n    try {\n    stream.getAudioTracks().forEach(track => audioStream.addTrack(track));\n\n    } catch(e) {\n      console.warn(`${clientId} setMediaStream Audio Error`, e);\n    }\n    const videoStream = new MediaStream();\n    try {\n    stream.getVideoTracks().forEach(track => videoStream.addTrack(track));\n\n    } catch (e) {\n      console.warn(`${clientId} setMediaStream Video Error`, e);\n    }\n\n    this.mediaStreams[clientId] = { audio: audioStream, video: videoStream };\n\n    // Resolve the promise for the user's media stream if it exists.\n    if (this.pendingMediaRequests.has(clientId)) {\n      this.pendingMediaRequests.get(clientId).audio.resolve(audioStream);\n      this.pendingMediaRequests.get(clientId).video.resolve(videoStream);\n    }\n  }\n\n  async setLocalMediaStream(stream) {\n    // our job here is to make sure the connection winds up with RTP senders sending the stuff in this stream,\n    // and not the stuff that isn't in this stream. strategy is to replace existing tracks if we can, add tracks\n    // that we can't replace, and disable tracks that don't exist anymore.\n\n    // note that we don't ever remove a track from the stream -- since Janus doesn't support Unified Plan, we absolutely\n    // can't wind up with a SDP that has >1 audio or >1 video tracks, even if one of them is inactive (what you get if\n    // you remove a track from an existing stream.)\n    if (this.publisher && this.publisher.conn) {\n      const existingSenders = this.publisher.conn.getSenders();\n      const newSenders = [];\n      const tracks = stream.getTracks();\n\n      for (let i = 0; i < tracks.length; i++) {\n        const t = tracks[i];\n        const sender = existingSenders.find(s => s.track != null && s.track.kind == t.kind);\n\n        if (sender != null) {\n          if (sender.replaceTrack) {\n            await sender.replaceTrack(t);\n\n            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1576771\n            if (t.kind === \"video\" && t.enabled && navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n              t.enabled = false;\n              setTimeout(() => t.enabled = true, 1000);\n            }\n          } else {\n            // Fallback for browsers that don't support replaceTrack. At this time of this writing\n            // most browsers support it, and testing this code path seems to not work properly\n            // in Chrome anymore.\n            stream.removeTrack(sender.track);\n            stream.addTrack(t);\n          }\n          newSenders.push(sender);\n        } else {\n          newSenders.push(this.publisher.conn.addTrack(t, stream));\n        }\n      }\n      existingSenders.forEach(s => {\n        if (!newSenders.includes(s)) {\n          s.track.enabled = false;\n        }\n      });\n    }\n    this.localMediaStream = stream;\n    this.setMediaStream(this.clientId, stream);\n  }\n\n  enableMicrophone(enabled) {\n    if (this.publisher && this.publisher.conn) {\n      this.publisher.conn.getSenders().forEach(s => {\n        if (s.track.kind == \"audio\") {\n          s.track.enabled = enabled;\n        }\n      });\n    }\n  }\n\n  sendData(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          break;\n        case \"datachannel\":\n          this.publisher.unreliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          break;\n        default:\n          this.unreliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  sendDataGuaranteed(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          break;\n        case \"datachannel\":\n          this.publisher.reliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          break;\n        default:\n          this.reliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastData(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          break;\n        case \"datachannel\":\n          this.publisher.unreliableChannel.send(JSON.stringify({ dataType, data }));\n          break;\n        default:\n          this.unreliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastDataGuaranteed(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          break;\n        case \"datachannel\":\n          this.publisher.reliableChannel.send(JSON.stringify({ dataType, data }));\n          break;\n        default:\n          this.reliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  kick(clientId, permsToken) {\n    return this.publisher.handle.sendMessage({ kind: \"kick\", room_id: this.room, user_id: clientId, token: permsToken }).then(() => {\n      document.body.dispatchEvent(new CustomEvent(\"kicked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  block(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"block\", whom: clientId }).then(() => {\n      this.blockedClients.set(clientId, true);\n      document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  unblock(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"unblock\", whom: clientId }).then(() => {\n      this.blockedClients.delete(clientId);\n      document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: clientId } }));\n    });\n  }\n}\n\nNAF.adapters.register(\"janus\", JanusAdapter);\n\nmodule.exports = JanusAdapter;\n","/**\n * Represents a handle to a single Janus plugin on a Janus session. Each WebRTC connection to the Janus server will be\n * associated with a single handle. Once attached to the server, this handle will be given a unique ID which should be\n * used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#handles.\n **/\nfunction JanusPluginHandle(session) {\n  this.session = session;\n  this.id = undefined;\n}\n\n/** Attaches this handle to the Janus server and sets its ID. **/\nJanusPluginHandle.prototype.attach = function(plugin) {\n  var payload = { plugin: plugin, \"force-bundle\": true, \"force-rtcp-mux\": true };\n  return this.session.send(\"attach\", payload).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Detaches this handle. **/\nJanusPluginHandle.prototype.detach = function() {\n  return this.send(\"detach\");\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this plugin handle with the\n * `janus` attribute equal to `ev`.\n **/\nJanusPluginHandle.prototype.on = function(ev, callback) {\n  return this.session.on(ev, signal => {\n    if (signal.sender == this.id) {\n      callback(signal);\n    }\n  });\n};\n\n/**\n * Sends a signal associated with this handle. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusPluginHandle.prototype.send = function(type, signal) {\n  return this.session.send(type, Object.assign({ handle_id: this.id }, signal));\n};\n\n/** Sends a plugin-specific message associated with this handle. **/\nJanusPluginHandle.prototype.sendMessage = function(body) {\n  return this.send(\"message\", { body: body });\n};\n\n/** Sends a JSEP offer or answer associated with this handle. **/\nJanusPluginHandle.prototype.sendJsep = function(jsep) {\n  return this.send(\"message\", { body: {}, jsep: jsep });\n};\n\n/** Sends an ICE trickle candidate associated with this handle. **/\nJanusPluginHandle.prototype.sendTrickle = function(candidate) {\n  return this.send(\"trickle\", { candidate: candidate });\n};\n\n/**\n * Represents a Janus session -- a Janus context from within which you can open multiple handles and connections. Once\n * created, this session will be given a unique ID which should be used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#sessions.\n **/\nfunction JanusSession(output, options) {\n  this.output = output;\n  this.id = undefined;\n  this.nextTxId = 0;\n  this.txns = {};\n  this.eventHandlers = {};\n  this.options = Object.assign({\n    verbose: false,\n    timeoutMs: 10000,\n    keepaliveMs: 30000\n  }, options);\n}\n\n/** Creates this session on the Janus server and sets its ID. **/\nJanusSession.prototype.create = function() {\n  return this.send(\"create\").then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/**\n * Destroys this session. Note that upon destruction, Janus will also close the signalling transport (if applicable) and\n * any open WebRTC connections.\n **/\nJanusSession.prototype.destroy = function() {\n  return this.send(\"destroy\").then((resp) => {\n    this.dispose();\n    return resp;\n  });\n};\n\n/**\n * Disposes of this session in a way such that no further incoming signalling messages will be processed.\n * Outstanding transactions will be rejected.\n **/\nJanusSession.prototype.dispose = function() {\n  this._killKeepalive();\n  this.eventHandlers = {};\n  for (var txId in this.txns) {\n    if (this.txns.hasOwnProperty(txId)) {\n      var txn = this.txns[txId];\n      clearTimeout(txn.timeout);\n      txn.reject(new Error(\"Janus session was disposed.\"));\n      delete this.txns[txId];\n    }\n  }\n};\n\n/**\n * Whether this signal represents an error, and the associated promise (if any) should be rejected.\n * Users should override this to handle any custom plugin-specific error conventions.\n **/\nJanusSession.prototype.isError = function(signal) {\n  return signal.janus === \"error\";\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this session with the\n * `janus` attribute equal to `ev`.\n **/\nJanusSession.prototype.on = function(ev, callback) {\n  var handlers = this.eventHandlers[ev];\n  if (handlers == null) {\n    handlers = this.eventHandlers[ev] = [];\n  }\n  handlers.push(callback);\n};\n\n/**\n * Callback for receiving JSON signalling messages pertinent to this session. If the signals are responses to previously\n * sent signals, the promises for the outgoing signals will be resolved or rejected appropriately with this signal as an\n * argument.\n *\n * External callers should call this function every time a new signal arrives on the transport; for example, in a\n * WebSocket's `message` event, or when a new datum shows up in an HTTP long-polling response.\n **/\nJanusSession.prototype.receive = function(signal) {\n  if (this.options.verbose) {\n    this._logIncoming(signal);\n  }\n  if (signal.session_id != this.id) {\n    console.warn(\"Incorrect session ID received in Janus signalling message: was \" + signal.session_id + \", expected \" + this.id + \".\");\n  }\n\n  var responseType = signal.janus;\n  var handlers = this.eventHandlers[responseType];\n  if (handlers != null) {\n    for (var i = 0; i < handlers.length; i++) {\n      handlers[i](signal);\n    }\n  }\n\n  if (signal.transaction != null) {\n    var txn = this.txns[signal.transaction];\n    if (txn == null) {\n      // this is a response to a transaction that wasn't caused via JanusSession.send, or a plugin replied twice to a\n      // single request, or the session was disposed, or something else that isn't under our purview; that's fine\n      return;\n    }\n\n    if (responseType === \"ack\" && txn.type == \"message\") {\n      // this is an ack of an asynchronously-processed plugin request, we should wait to resolve the promise until the\n      // actual response comes in\n      return;\n    }\n\n    clearTimeout(txn.timeout);\n\n    delete this.txns[signal.transaction];\n    (this.isError(signal) ? txn.reject : txn.resolve)(signal);\n  }\n};\n\n/**\n * Sends a signal associated with this session, beginning a new transaction. Returns a promise that will be resolved or\n * rejected when a response is received in the same transaction, or when no response is received within the session\n * timeout.\n **/\nJanusSession.prototype.send = function(type, signal) {\n  signal = Object.assign({ transaction: (this.nextTxId++).toString() }, signal);\n  return new Promise((resolve, reject) => {\n    var timeout = null;\n    if (this.options.timeoutMs) {\n      timeout = setTimeout(() => {\n        delete this.txns[signal.transaction];\n        reject(new Error(\"Signalling transaction with txid \" + signal.transaction + \" timed out.\"));\n      }, this.options.timeoutMs);\n    }\n    this.txns[signal.transaction] = { resolve: resolve, reject: reject, timeout: timeout, type: type };\n    this._transmit(type, signal);\n  });\n};\n\nJanusSession.prototype._transmit = function(type, signal) {\n  signal = Object.assign({ janus: type }, signal);\n\n  if (this.id != null) { // this.id is undefined in the special case when we're sending the session create message\n    signal = Object.assign({ session_id: this.id }, signal);\n  }\n\n  if (this.options.verbose) {\n    this._logOutgoing(signal);\n  }\n\n  this.output(JSON.stringify(signal));\n  this._resetKeepalive();\n};\n\nJanusSession.prototype._logOutgoing = function(signal) {\n  var kind = signal.janus;\n  if (kind === \"message\" && signal.jsep) {\n    kind = signal.jsep.type;\n  }\n  var message = \"> Outgoing Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \";\n  console.debug(\"%c\" + message, \"color: #040\", signal);\n};\n\nJanusSession.prototype._logIncoming = function(signal) {\n  var kind = signal.janus;\n  var message = signal.transaction ?\n      \"< Incoming Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \" :\n      \"< Incoming Janus \" + (kind || \"signal\") + \": \";\n  console.debug(\"%c\" + message, \"color: #004\", signal);\n};\n\nJanusSession.prototype._sendKeepalive = function() {\n  return this.send(\"keepalive\");\n};\n\nJanusSession.prototype._killKeepalive = function() {\n  clearTimeout(this.keepaliveTimeout);\n};\n\nJanusSession.prototype._resetKeepalive = function() {\n  this._killKeepalive();\n  if (this.options.keepaliveMs) {\n    this.keepaliveTimeout = setTimeout(() => {\n      this._sendKeepalive().catch(e => console.error(\"Error received from keepalive: \", e));\n    }, this.options.keepaliveMs);\n  }\n};\n\nmodule.exports = {\n  JanusPluginHandle,\n  JanusSession\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n"],"sourceRoot":""}